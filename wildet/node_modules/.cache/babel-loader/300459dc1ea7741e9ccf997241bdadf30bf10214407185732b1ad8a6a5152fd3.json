{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Utilities related to persistent state in the backend.\n */\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\nexport function getNextUniqueTensorId() {\n  return _nextUniqueTensorId++;\n}\nconst _uidPrefixes = {};\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}","map":{"version":3,"names":["_nextUniqueTensorId","getNextUniqueTensorId","_uidPrefixes","getUid","prefix","arguments","length","undefined","toString"],"sources":["/Users/minjeongyeom/Projects/project-wildet/tfjs-layers/src/backend/state.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Utilities related to persistent state in the backend.\n */\n\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\n\nexport function getNextUniqueTensorId(): number {\n  return _nextUniqueTensorId++;\n}\n\nconst _uidPrefixes: {[prefix: string]: number} = {};\n\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = ''): string {\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}\n"],"mappings":"AAAA;;;;;;;;;AAUA;;;AAIA;;;;;AAKA,IAAIA,mBAAmB,GAAG,CAAC;AAE3B,OAAM,SAAUC,qBAAqBA,CAAA;EACnC,OAAOD,mBAAmB,EAAE;AAC9B;AAEA,MAAME,YAAY,GAA+B,EAAE;AAEnD;;;;;AAKA,OAAM,SAAUC,MAAMA,CAAA,EAAY;EAAA,IAAXC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAChC,IAAI,EAAED,MAAM,IAAIF,YAAY,CAAC,EAAE;IAC7BA,YAAY,CAACE,MAAM,CAAC,GAAG,CAAC;;EAE1BF,YAAY,CAACE,MAAM,CAAC,IAAI,CAAC;EACzB,OAAOA,MAAM,GAAGF,YAAY,CAACE,MAAM,CAAC,CAACI,QAAQ,EAAE;AACjD"},"metadata":{},"sourceType":"module","externalDependencies":[]}