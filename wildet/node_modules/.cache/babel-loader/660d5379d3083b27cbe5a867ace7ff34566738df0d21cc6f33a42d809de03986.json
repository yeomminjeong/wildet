{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(x, depthwiseKernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1];\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` + `${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` + `${depthwiseKernel.rank}-D`);\n    }\n    y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\nexport class DepthwiseConv2D extends BaseConv {\n  constructor(args) {\n    super(2, args);\n    this.depthwiseKernel = null;\n    this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` + `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n      // TODO(cais): Add support for dilation.\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n  getConfig() {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n}\n/** @nocollapse */\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);","map":{"version":3,"names":["tfc","serialization","tidy","imageDataFormat","K","checkDataFormat","getConstraint","serializeConstraint","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","convOutputLength","getExactlyOneShape","getExactlyOneTensor","BaseConv","preprocessConv2DInput","depthwiseConv2d","x","depthwiseKernel","strides","arguments","length","undefined","padding","dataFormat","dilationRate","y","rank","transpose","DepthwiseConv2D","constructor","args","depthMultiplier","depthwiseInitializer","DEFAULT_KERNEL_INITIALIZER","depthwiseConstraint","depthwiseRegularizer","build","inputShape","JSON","stringify","channelAxis","inputDim","depthwiseKernelShape","kernelSize","addWeight","useBias","bias","biasInitializer","biasRegularizer","biasConstraint","built","call","inputs","kwargs","outputs","read","biasAdd","activation","apply","computeOutputShape","rows","cols","outFilters","outRows","outCols","getConfig","config","className","registerClass"],"sources":["/Users/minjeongyeom/Projects/project-wildet/tfjs-layers/src/layers/convolutional_depthwise.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {BaseConv, BaseConvLayerArgs, ConvLayerArgs, preprocessConv2DInput} from './convolutional';\n\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(\n    x: Tensor, depthwiseKernel: Tensor, strides: [number, number] = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n          `${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(\n          `depthwiseKernel is required to be 4-D, but is instead ` +\n          `${depthwiseKernel.rank}-D`);\n    }\n    y = tfc.depthwiseConv2d(\n        y as Tensor4D, depthwiseKernel as Tensor4D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\nexport declare interface DepthwiseConv2DLayerArgs extends BaseConvLayerArgs {\n  /**\n   * An integer or Array of 2 integers, specifying the width and height of the\n   * 2D convolution window. Can be a single integer to specify the same value\n   * for all spatial dimensions.\n   */\n  kernelSize: number|[number, number];\n\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal to\n   * `filtersIn * depthMultiplier`.\n   * Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   * Default: GlorotNormal.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function for the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class DepthwiseConv2D extends BaseConv {\n  /** @nocollapse */\n  static className = 'DepthwiseConv2D';\n  private readonly depthMultiplier: number;\n  private readonly depthwiseInitializer: Initializer;\n  private readonly depthwiseConstraint: Constraint;\n  private readonly depthwiseRegularizer: Regularizer;\n\n  private depthwiseKernel: LayerVariable = null;\n\n  constructor(args: DepthwiseConv2DLayerArgs) {\n    super(2, args as ConvLayerArgs);\n    this.depthMultiplier =\n        args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  override build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(\n          `Inputs to DepthwiseConv2D should have rank 4. ` +\n          `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          'The channel dimension of the inputs to DepthwiseConv2D should ' +\n          `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape: Shape = [\n      this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n    ];\n\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, null,\n        this.depthwiseInitializer, this.depthwiseRegularizer, true,\n        this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [inputDim * this.depthMultiplier], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  override call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(\n          inputs, this.depthwiseKernel.read(), this.strides as [number, number],\n          this.padding, this.dataFormat, null);\n      // TODO(cais): Add support for dilation.\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n\n  override computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ?\n        inputShape[1] * this.depthMultiplier :\n        inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(\n        rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(\n        cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  override getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n}\nserialization.registerClass(DepthwiseConv2D);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}