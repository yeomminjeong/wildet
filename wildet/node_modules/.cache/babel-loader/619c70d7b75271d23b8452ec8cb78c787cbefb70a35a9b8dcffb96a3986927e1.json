{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropInput } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad) {\n  let dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NHWC';\n  let dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n  let xShape4D = xShape;\n  let dy4D = dy;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n  util.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` + `${xShape4D.length}.`);\n  util.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` + `rank ${dy4D.rank}`);\n  util.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` + `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[3]}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);\n  const inputs = {\n    dy: dy4D,\n    filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    inputShape: xShape4D\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(Conv2DBackpropInput, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nexport const conv2DBackpropInput = /* @__PURE__ */op({\n  conv2DBackpropInput_\n});","map":{"version":3,"names":["ENGINE","Conv2DBackpropInput","util","conv_util","op","reshape","conv2DBackpropInput_","xShape","dy","filter","strides","pad","dataFormat","arguments","length","undefined","dimRoundingMode","assert","rank","xShape4D","dy4D","reshapedTo4D","shape","inDepth","outDepth","checkPadOnDimRoundingMode","inputs","attrs","inputShape","res","runKernel","conv2DBackpropInput"],"sources":["/Users/minjeongyeom/Projects/project-wildet/tfjs-core/src/ops/conv2d_backprop_input.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number]|[number, number, number], dy: T,\n    filter: Tensor4D, strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape4D = xShape as [number, number, number, number];\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(\n      xShape4D.length === 4,\n      () =>\n          `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n          `${xShape4D.length}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n          `rank ${dy4D.rank}`);\n  util.assert(\n      filter.rank === 4,\n      () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n          `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filter.shape[2],\n      () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(\n      outDepth === filter.shape[3],\n      () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[3]}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);\n  const inputs: Conv2DBackpropInputInputs = {dy: dy4D, filter};\n  const attrs: Conv2DBackpropInputAttrs =\n      {strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv2DBackpropInput, inputs as unknown as NamedTensorMap,\n                  attrs as unknown as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const conv2DBackpropInput = /* @__PURE__ */ op({conv2DBackpropInput_});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}