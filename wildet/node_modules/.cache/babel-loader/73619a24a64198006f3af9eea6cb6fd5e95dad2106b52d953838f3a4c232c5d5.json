{"ast":null,"code":"import _regeneratorRuntime from \"/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nvar SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nvar deleteOutdatedCaches = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(currentPrecacheName) {\n    var substringToFind,\n      cacheNames,\n      cacheNamesToDelete,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          substringToFind = _args.length > 1 && _args[1] !== undefined ? _args[1] : SUBSTRING_TO_FIND;\n          _context.next = 3;\n          return self.caches.keys();\n        case 3:\n          cacheNames = _context.sent;\n          cacheNamesToDelete = cacheNames.filter(function (cacheName) {\n            return cacheName.includes(substringToFind) && cacheName.includes(self.registration.scope) && cacheName !== currentPrecacheName;\n          });\n          _context.next = 7;\n          return Promise.all(cacheNamesToDelete.map(function (cacheName) {\n            return self.caches.delete(cacheName);\n          }));\n        case 7:\n          return _context.abrupt(\"return\", cacheNamesToDelete);\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function deleteOutdatedCaches(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { deleteOutdatedCaches };","map":{"version":3,"names":["SUBSTRING_TO_FIND","deleteOutdatedCaches","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","currentPrecacheName","substringToFind","cacheNames","cacheNamesToDelete","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","self","caches","keys","sent","filter","cacheName","includes","registration","scope","Promise","all","map","delete","abrupt","stop","_x","apply"],"sources":["/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/workbox-precaching/utils/deleteOutdatedCaches.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst SUBSTRING_TO_FIND = '-precache-';\n/**\n * Cleans up incompatible precaches that were created by older versions of\n * Workbox, by a service worker registered under the current scope.\n *\n * This is meant to be called as part of the `activate` event.\n *\n * This should be safe to use as long as you don't include `substringToFind`\n * (defaulting to `-precache-`) in your non-precache cache names.\n *\n * @param {string} currentPrecacheName The cache name currently in use for\n * precaching. This cache won't be deleted.\n * @param {string} [substringToFind='-precache-'] Cache names which include this\n * substring will be deleted (excluding `currentPrecacheName`).\n * @return {Array<string>} A list of all the cache names that were deleted.\n *\n * @private\n * @memberof workbox-precaching\n */\nconst deleteOutdatedCaches = async (currentPrecacheName, substringToFind = SUBSTRING_TO_FIND) => {\n    const cacheNames = await self.caches.keys();\n    const cacheNamesToDelete = cacheNames.filter((cacheName) => {\n        return (cacheName.includes(substringToFind) &&\n            cacheName.includes(self.registration.scope) &&\n            cacheName !== currentPrecacheName);\n    });\n    await Promise.all(cacheNamesToDelete.map((cacheName) => self.caches.delete(cacheName)));\n    return cacheNamesToDelete;\n};\nexport { deleteOutdatedCaches };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAgB;AACvB,IAAMA,iBAAiB,GAAG,YAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,oBAAoB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAOC,mBAAmB;IAAA,IAAAC,eAAA;MAAAC,UAAA;MAAAC,kBAAA;MAAAC,KAAA,GAAAC,SAAA;IAAA,OAAAR,mBAAA,GAAAS,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAET,eAAe,GAAAG,KAAA,CAAAO,MAAA,QAAAP,KAAA,QAAAQ,SAAA,GAAAR,KAAA,MAAGX,iBAAiB;UAAAe,QAAA,CAAAE,IAAA;UAAA,OAC/DG,IAAI,CAACC,MAAM,CAACC,IAAI,EAAE;QAAA;UAArCb,UAAU,GAAAM,QAAA,CAAAQ,IAAA;UACVb,kBAAkB,GAAGD,UAAU,CAACe,MAAM,CAAC,UAACC,SAAS,EAAK;YACxD,OAAQA,SAAS,CAACC,QAAQ,CAAClB,eAAe,CAAC,IACvCiB,SAAS,CAACC,QAAQ,CAACN,IAAI,CAACO,YAAY,CAACC,KAAK,CAAC,IAC3CH,SAAS,KAAKlB,mBAAmB;UACzC,CAAC,CAAC;UAAAQ,QAAA,CAAAE,IAAA;UAAA,OACIY,OAAO,CAACC,GAAG,CAACpB,kBAAkB,CAACqB,GAAG,CAAC,UAACN,SAAS;YAAA,OAAKL,IAAI,CAACC,MAAM,CAACW,MAAM,CAACP,SAAS,CAAC;UAAA,EAAC,CAAC;QAAA;UAAA,OAAAV,QAAA,CAAAkB,MAAA,WAChFvB,kBAAkB;QAAA;QAAA;UAAA,OAAAK,QAAA,CAAAmB,IAAA;MAAA;IAAA,GAAA5B,OAAA;EAAA,CAC5B;EAAA,gBATKL,oBAAoBA,CAAAkC,EAAA;IAAA,OAAAjC,IAAA,CAAAkC,KAAA,OAAAxB,SAAA;EAAA;AAAA,GASzB;AACD,SAASX,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}