{"ast":null,"code":"import _regeneratorRuntime from \"/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function generateURLVariations(url) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$ignoreURLParamet = _ref.ignoreURLParametersMatching,\n    ignoreURLParametersMatching = _ref$ignoreURLParamet === void 0 ? [/^utm_/, /^fbclid$/] : _ref$ignoreURLParamet,\n    _ref$directoryIndex = _ref.directoryIndex,\n    directoryIndex = _ref$directoryIndex === void 0 ? 'index.html' : _ref$directoryIndex,\n    _ref$cleanURLs = _ref.cleanURLs,\n    cleanURLs = _ref$cleanURLs === void 0 ? true : _ref$cleanURLs,\n    urlManipulation = _ref.urlManipulation;\n  return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var urlObject, urlWithoutIgnoredParams, directoryURL, cleanURL, additionalURLs, _iterator, _step, urlToAttempt;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          urlObject = new URL(url, location.href);\n          urlObject.hash = '';\n          _context.next = 4;\n          return urlObject.href;\n        case 4:\n          urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n          _context.next = 7;\n          return urlWithoutIgnoredParams.href;\n        case 7:\n          if (!(directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/'))) {\n            _context.next = 12;\n            break;\n          }\n          directoryURL = new URL(urlWithoutIgnoredParams.href);\n          directoryURL.pathname += directoryIndex;\n          _context.next = 12;\n          return directoryURL.href;\n        case 12:\n          if (!cleanURLs) {\n            _context.next = 17;\n            break;\n          }\n          cleanURL = new URL(urlWithoutIgnoredParams.href);\n          cleanURL.pathname += '.html';\n          _context.next = 17;\n          return cleanURL.href;\n        case 17:\n          if (!urlManipulation) {\n            _context.next = 36;\n            break;\n          }\n          additionalURLs = urlManipulation({\n            url: urlObject\n          });\n          _iterator = _createForOfIteratorHelper(additionalURLs);\n          _context.prev = 20;\n          _iterator.s();\n        case 22:\n          if ((_step = _iterator.n()).done) {\n            _context.next = 28;\n            break;\n          }\n          urlToAttempt = _step.value;\n          _context.next = 26;\n          return urlToAttempt.href;\n        case 26:\n          _context.next = 22;\n          break;\n        case 28:\n          _context.next = 33;\n          break;\n        case 30:\n          _context.prev = 30;\n          _context.t0 = _context[\"catch\"](20);\n          _iterator.e(_context.t0);\n        case 33:\n          _context.prev = 33;\n          _iterator.f();\n          return _context.finish(33);\n        case 36:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[20, 30, 33, 36]]);\n  })();\n}","map":{"version":3,"names":["removeIgnoredSearchParams","generateURLVariations","url","_ref","arguments","length","undefined","_ref$ignoreURLParamet","ignoreURLParametersMatching","_ref$directoryIndex","directoryIndex","_ref$cleanURLs","cleanURLs","urlManipulation","_regeneratorRuntime","mark","_callee","urlObject","urlWithoutIgnoredParams","directoryURL","cleanURL","additionalURLs","_iterator","_step","urlToAttempt","wrap","_callee$","_context","prev","next","URL","location","href","hash","pathname","endsWith","_createForOfIteratorHelper","s","n","done","value","t0","e","f","finish","stop"],"sources":["/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/workbox-precaching/utils/generateURLVariations.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { removeIgnoredSearchParams } from './removeIgnoredSearchParams.js';\nimport '../_version.js';\n/**\n * Generator function that yields possible variations on the original URL to\n * check, one at a time.\n *\n * @param {string} url\n * @param {Object} options\n *\n * @private\n * @memberof workbox-precaching\n */\nexport function* generateURLVariations(url, { ignoreURLParametersMatching = [/^utm_/, /^fbclid$/], directoryIndex = 'index.html', cleanURLs = true, urlManipulation, } = {}) {\n    const urlObject = new URL(url, location.href);\n    urlObject.hash = '';\n    yield urlObject.href;\n    const urlWithoutIgnoredParams = removeIgnoredSearchParams(urlObject, ignoreURLParametersMatching);\n    yield urlWithoutIgnoredParams.href;\n    if (directoryIndex && urlWithoutIgnoredParams.pathname.endsWith('/')) {\n        const directoryURL = new URL(urlWithoutIgnoredParams.href);\n        directoryURL.pathname += directoryIndex;\n        yield directoryURL.href;\n    }\n    if (cleanURLs) {\n        const cleanURL = new URL(urlWithoutIgnoredParams.href);\n        cleanURL.pathname += '.html';\n        yield cleanURL.href;\n    }\n    if (urlManipulation) {\n        const additionalURLs = urlManipulation({ url: urlObject });\n        for (const urlToAttempt of additionalURLs) {\n            yield urlToAttempt.href;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}