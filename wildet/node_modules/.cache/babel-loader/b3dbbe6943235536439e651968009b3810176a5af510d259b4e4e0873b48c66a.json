{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = function (node, tensorMap, context) {\n  let ops = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : tfOps;\n  switch (node.op) {\n    case 'Cast':\n      {\n        return [ops.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'ExpandDims':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [ops.expandDims(getParamValue('x', node, tensorMap, context), axis)];\n      }\n    case 'Squeeze':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [ops.squeeze(getParamValue('x', node, tensorMap, context), axis)];\n      }\n    case 'Reshape':\n      {\n        return [ops.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n    case 'EnsureShape':\n      {\n        return [ops.ensureShape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n    case 'MirrorPad':\n      {\n        return [ops.mirrorPad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('mode', node, tensorMap, context))];\n      }\n    case 'PadV2':\n    case 'Pad':\n      {\n        return [ops.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];\n      }\n    case 'SpaceToBatchND':\n      {\n        const blockShape = getParamValue('blockShape', node, tensorMap, context);\n        const paddings = getParamValue('paddings', node, tensorMap, context);\n        return [ops.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];\n      }\n    case 'BatchToSpaceND':\n      {\n        const blockShape = getParamValue('blockShape', node, tensorMap, context);\n        const crops = getParamValue('crops', node, tensorMap, context);\n        return [ops.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];\n      }\n    case 'DepthToSpace':\n      {\n        const blockSize = getParamValue('blockSize', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        return [ops.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];\n      }\n    case 'BroadcastTo':\n      {\n        return [ops.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n    case 'BroadcastArgs':\n      {\n        return [ops.broadcastArgs(getParamValue('s0', node, tensorMap, context), getParamValue('s1', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'transformation';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","ops","arguments","length","undefined","op","cast","axis","expandDims","squeeze","reshape","ensureShape","mirrorPad","pad","blockShape","paddings","spaceToBatchND","crops","batchToSpaceND","blockSize","dataFormat","toUpperCase","depthToSpace","broadcastTo","broadcastArgs","TypeError","CATEGORY"],"sources":["/Users/minjeongyeom/Projects/project-wildet/tfjs-converter/src/operations/executors/transformation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n     ops = tfOps): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [ops.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [ops.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [ops.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [ops.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'EnsureShape': {\n          return [ops.ensureShape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'MirrorPad': {\n          return [ops.mirrorPad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('mode', node, tensorMap, context) as 'reflect' |\n                  'symmetric')];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [ops.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [ops.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [ops.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [ops.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [ops.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'BroadcastArgs': {\n          return [ops.broadcastArgs(\n              getParamValue('s0', node, tensorMap, context) as Tensor,\n              getParamValue('s1', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}