{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nvar isArray = function isArray(value, details) {\n  if (!Array.isArray(value)) {\n    throw new WorkboxError('not-an-array', details);\n  }\n};\nvar hasMethod = function hasMethod(object, expectedMethod, details) {\n  var type = typeof object[expectedMethod];\n  if (type !== 'function') {\n    details['expectedMethod'] = expectedMethod;\n    throw new WorkboxError('missing-a-method', details);\n  }\n};\nvar isType = function isType(object, expectedType, details) {\n  if (typeof object !== expectedType) {\n    details['expectedType'] = expectedType;\n    throw new WorkboxError('incorrect-type', details);\n  }\n};\nvar isInstance = function isInstance(object,\n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) {\n  if (!(object instanceof expectedClass)) {\n    details['expectedClassName'] = expectedClass.name;\n    throw new WorkboxError('incorrect-class', details);\n  }\n};\nvar isOneOf = function isOneOf(value, validValues, details) {\n  if (!validValues.includes(value)) {\n    details['validValueDescription'] = \"Valid values are \".concat(JSON.stringify(validValues), \".\");\n    throw new WorkboxError('invalid-value', details);\n  }\n};\nvar isArrayOfClass = function isArrayOfClass(value,\n// Need general type to do check later.\nexpectedClass,\n// eslint-disable-line\ndetails) {\n  var error = new WorkboxError('not-array-of-class', details);\n  if (!Array.isArray(value)) {\n    throw error;\n  }\n  var _iterator = _createForOfIteratorHelper(value),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var item = _step.value;\n      if (!(item instanceof expectedClass)) {\n        throw error;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nvar finalAssertExports = process.env.NODE_ENV === 'production' ? null : {\n  hasMethod: hasMethod,\n  isArray: isArray,\n  isInstance: isInstance,\n  isOneOf: isOneOf,\n  isType: isType,\n  isArrayOfClass: isArrayOfClass\n};\nexport { finalAssertExports as assert };","map":{"version":3,"names":["WorkboxError","isArray","value","details","Array","hasMethod","object","expectedMethod","type","isType","expectedType","isInstance","expectedClass","name","isOneOf","validValues","includes","concat","JSON","stringify","isArrayOfClass","error","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","err","e","f","finalAssertExports","process","env","NODE_ENV","assert"],"sources":["/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/workbox-core/_private/assert.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}