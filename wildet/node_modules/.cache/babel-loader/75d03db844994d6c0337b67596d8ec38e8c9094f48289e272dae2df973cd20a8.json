{"ast":null,"code":"import _regeneratorRuntime from \"/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nfunction copyResponse(_x, _x2) {\n  return _copyResponse.apply(this, arguments);\n}\nfunction _copyResponse() {\n  _copyResponse = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response, modifier) {\n    var origin, responseURL, clonedResponse, responseInit, modifiedResponseInit, body;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          origin = null; // If response.url isn't set, assume it's cross-origin and keep origin null.\n          if (response.url) {\n            responseURL = new URL(response.url);\n            origin = responseURL.origin;\n          }\n          if (!(origin !== self.location.origin)) {\n            _context.next = 4;\n            break;\n          }\n          throw new WorkboxError('cross-origin-copy-response', {\n            origin: origin\n          });\n        case 4:\n          clonedResponse = response.clone(); // Create a fresh `ResponseInit` object by cloning the headers.\n          responseInit = {\n            headers: new Headers(clonedResponse.headers),\n            status: clonedResponse.status,\n            statusText: clonedResponse.statusText\n          }; // Apply any user modifications.\n          modifiedResponseInit = modifier ? modifier(responseInit) : responseInit; // Create the new response from the body stream and `ResponseInit`\n          // modifications. Note: not all browsers support the Response.body stream,\n          // so fall back to reading the entire body into memory as a blob.\n          if (!canConstructResponseFromBodyStream()) {\n            _context.next = 11;\n            break;\n          }\n          _context.t0 = clonedResponse.body;\n          _context.next = 14;\n          break;\n        case 11:\n          _context.next = 13;\n          return clonedResponse.blob();\n        case 13:\n          _context.t0 = _context.sent;\n        case 14:\n          body = _context.t0;\n          return _context.abrupt(\"return\", new Response(body, modifiedResponseInit));\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _copyResponse.apply(this, arguments);\n}\nexport { copyResponse };","map":{"version":3,"names":["canConstructResponseFromBodyStream","WorkboxError","copyResponse","_x","_x2","_copyResponse","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","modifier","origin","responseURL","clonedResponse","responseInit","modifiedResponseInit","body","wrap","_callee$","_context","prev","next","url","URL","self","location","clone","headers","Headers","status","statusText","t0","blob","sent","abrupt","Response","stop"],"sources":["/Users/minjeongyeom/Projects/project-wildet/wildet/node_modules/workbox-core/copyResponse.js"],"sourcesContent":["/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { canConstructResponseFromBodyStream } from './_private/canConstructResponseFromBodyStream.js';\nimport { WorkboxError } from './_private/WorkboxError.js';\nimport './_version.js';\n/**\n * Allows developers to copy a response and modify its `headers`, `status`,\n * or `statusText` values (the values settable via a\n * [`ResponseInit`]{@link https://developer.mozilla.org/en-US/docs/Web/API/Response/Response#Syntax}\n * object in the constructor).\n * To modify these values, pass a function as the second argument. That\n * function will be invoked with a single object with the response properties\n * `{headers, status, statusText}`. The return value of this function will\n * be used as the `ResponseInit` for the new `Response`. To change the values\n * either modify the passed parameter(s) and return it, or return a totally\n * new object.\n *\n * This method is intentionally limited to same-origin responses, regardless of\n * whether CORS was used or not.\n *\n * @param {Response} response\n * @param {Function} modifier\n * @memberof workbox-core\n */\nasync function copyResponse(response, modifier) {\n    let origin = null;\n    // If response.url isn't set, assume it's cross-origin and keep origin null.\n    if (response.url) {\n        const responseURL = new URL(response.url);\n        origin = responseURL.origin;\n    }\n    if (origin !== self.location.origin) {\n        throw new WorkboxError('cross-origin-copy-response', { origin });\n    }\n    const clonedResponse = response.clone();\n    // Create a fresh `ResponseInit` object by cloning the headers.\n    const responseInit = {\n        headers: new Headers(clonedResponse.headers),\n        status: clonedResponse.status,\n        statusText: clonedResponse.statusText,\n    };\n    // Apply any user modifications.\n    const modifiedResponseInit = modifier ? modifier(responseInit) : responseInit;\n    // Create the new response from the body stream and `ResponseInit`\n    // modifications. Note: not all browsers support the Response.body stream,\n    // so fall back to reading the entire body into memory as a blob.\n    const body = canConstructResponseFromBodyStream()\n        ? clonedResponse.body\n        : await clonedResponse.blob();\n    return new Response(body, modifiedResponseInit);\n}\nexport { copyResponse };\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kCAAkC,QAAQ,kDAAkD;AACrG,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAO,eAAe;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA,SAmBeC,YAAYA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,aAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,cAAA;EAAAA,aAAA,GAAAG,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAA3B,SAAAC,QAA4BC,QAAQ,EAAEC,QAAQ;IAAA,IAAAC,MAAA,EAAAC,WAAA,EAAAC,cAAA,EAAAC,YAAA,EAAAC,oBAAA,EAAAC,IAAA;IAAA,OAAAV,mBAAA,GAAAW,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACtCV,MAAM,GAAG,IAAI,EACjB;UACA,IAAIF,QAAQ,CAACa,GAAG,EAAE;YACRV,WAAW,GAAG,IAAIW,GAAG,CAACd,QAAQ,CAACa,GAAG,CAAC;YACzCX,MAAM,GAAGC,WAAW,CAACD,MAAM;UAC/B;UAAC,MACGA,MAAM,KAAKa,IAAI,CAACC,QAAQ,CAACd,MAAM;YAAAQ,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MACzB,IAAIvB,YAAY,CAAC,4BAA4B,EAAE;YAAEa,MAAM,EAANA;UAAO,CAAC,CAAC;QAAA;UAE9DE,cAAc,GAAGJ,QAAQ,CAACiB,KAAK,EAAE,EACvC;UACMZ,YAAY,GAAG;YACjBa,OAAO,EAAE,IAAIC,OAAO,CAACf,cAAc,CAACc,OAAO,CAAC;YAC5CE,MAAM,EAAEhB,cAAc,CAACgB,MAAM;YAC7BC,UAAU,EAAEjB,cAAc,CAACiB;UAC/B,CAAC,EACD;UACMf,oBAAoB,GAAGL,QAAQ,GAAGA,QAAQ,CAACI,YAAY,CAAC,GAAGA,YAAY,EAC7E;UACA;UACA;UAAA,KACajB,kCAAkC,EAAE;YAAAsB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAY,EAAA,GAC3ClB,cAAc,CAACG,IAAI;UAAAG,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OACbR,cAAc,CAACmB,IAAI,EAAE;QAAA;UAAAb,QAAA,CAAAY,EAAA,GAAAZ,QAAA,CAAAc,IAAA;QAAA;UAF3BjB,IAAI,GAAAG,QAAA,CAAAY,EAAA;UAAA,OAAAZ,QAAA,CAAAe,MAAA,WAGH,IAAIC,QAAQ,CAACnB,IAAI,EAAED,oBAAoB,CAAC;QAAA;QAAA;UAAA,OAAAI,QAAA,CAAAiB,IAAA;MAAA;IAAA,GAAA5B,OAAA;EAAA,CAClD;EAAA,OAAAN,aAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AACD,SAASL,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}