{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { fill } from '../fill';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { tensor2d } from '../tensor2d';\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue A number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(signal, frameLength, frameStep) {\n  let padEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let padValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let start = 0;\n  const output = [];\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = start + frameLength - signal.size;\n      const pad = concat([slice(signal, start, frameLength - padLen), fill([padLen], padValue)]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n  return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = /* @__PURE__ */op({\n  frame_\n});","map":{"version":3,"names":["concat","fill","op","reshape","slice","tensor2d","frame_","signal","frameLength","frameStep","padEnd","arguments","length","undefined","padValue","start","output","size","push","padLen","pad","frame"],"sources":["/Users/minjeongyeom/Projects/project-wildet/tfjs-core/src/ops/signal/frame.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {concat} from '../concat';\nimport {fill} from '../fill';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {slice} from '../slice';\nimport {tensor2d} from '../tensor2d';\n\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue A number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(\n    signal: Tensor1D, frameLength: number, frameStep: number, padEnd = false,\n    padValue = 0): Tensor {\n  let start = 0;\n  const output: Tensor[] = [];\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = (start + frameLength) - signal.size;\n      const pad = concat([\n        slice(signal, start, frameLength - padLen), fill([padLen], padValue)\n      ]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n\n  return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = /* @__PURE__ */ op({frame_});\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,MAAM,QAAO,WAAW;AAChC,SAAQC,IAAI,QAAO,SAAS;AAC5B,SAAQC,EAAE,QAAO,cAAc;AAC/B,SAAQC,OAAO,QAAO,YAAY;AAClC,SAAQC,KAAK,QAAO,UAAU;AAC9B,SAAQC,QAAQ,QAAO,aAAa;AAEpC;;;;;;;;;;;;;;;;AAgBA,SAASC,MAAMA,CACXC,MAAgB,EAAEC,WAAmB,EAAEC,SAAiB,EAC5C;EAAA,IAD8CC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAAA,IACxEG,QAAQ,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EACd,IAAII,KAAK,GAAG,CAAC;EACb,MAAMC,MAAM,GAAa,EAAE;EAC3B,OAAOD,KAAK,GAAGP,WAAW,IAAID,MAAM,CAACU,IAAI,EAAE;IACzCD,MAAM,CAACE,IAAI,CAACd,KAAK,CAACG,MAAM,EAAEQ,KAAK,EAAEP,WAAW,CAAC,CAAC;IAC9CO,KAAK,IAAIN,SAAS;;EAGpB,IAAIC,MAAM,EAAE;IACV,OAAOK,KAAK,GAAGR,MAAM,CAACU,IAAI,EAAE;MAC1B,MAAME,MAAM,GAAIJ,KAAK,GAAGP,WAAW,GAAID,MAAM,CAACU,IAAI;MAClD,MAAMG,GAAG,GAAGpB,MAAM,CAAC,CACjBI,KAAK,CAACG,MAAM,EAAEQ,KAAK,EAAEP,WAAW,GAAGW,MAAM,CAAC,EAAElB,IAAI,CAAC,CAACkB,MAAM,CAAC,EAAEL,QAAQ,CAAC,CACrE,CAAC;MACFE,MAAM,CAACE,IAAI,CAACE,GAAG,CAAC;MAChBL,KAAK,IAAIN,SAAS;;;EAItB,IAAIO,MAAM,CAACJ,MAAM,KAAK,CAAC,EAAE;IACvB,OAAOP,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,EAAEG,WAAW,CAAC,CAAC;;EAGvC,OAAOL,OAAO,CAACH,MAAM,CAACgB,MAAM,CAAC,EAAE,CAACA,MAAM,CAACJ,MAAM,EAAEJ,WAAW,CAAC,CAAC;AAC9D;AACA,OAAO,MAAMa,KAAK,GAAG,eAAgBnB,EAAE,CAAC;EAACI;AAAM,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}