{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { countParamsInWeights } from './variable_utils';\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(model, lineLength, positions) {\n  let printFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : console.log;\n  const sequentialLike = isModelSequentialLike(model);\n  // Header names for different log elements.\n  const toDisplay = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 90;\n    positions = positions || [0.32, 0.61, 0.89, 1];\n  } else {\n    lineLength = lineLength || 115;\n    positions = positions || [0.24, 0.48, 0.70, 0.80, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n  let relevantNodes;\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n  const layers = model.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n  // tslint:disable-next-line:no-any\n  model.checkTrainableWeightsConsistency();\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\nfunction countTrainableParams(model) {\n  let trainableCount;\n  // tslint:disable:no-any\n  if (model.collectedTrainableWeights != null) {\n    trainableCount = countParamsInWeights(model.collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\nfunction isModelSequentialLike(model) {\n  let sequentialLike = true;\n  const nodesByDepth = [];\n  const nodes = [];\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 || depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\nfunction printRow(fields, positions) {\n  let printFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : console.log;\n  let line = '';\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(layer, positions,\n// tslint:disable-next-line:no-any\nprintFn) {\n  let outputShape;\n  let inputShape;\n  try {\n    inputShape = layer.inboundNodes.map(x => JSON.stringify(x.inputShapes)).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields = [`${name} (${className})`, inputShape, outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(layer, positions, relevantNodes,\n// tslint:disable-next-line:no-any\nprintFn) {\n  let outputShape;\n  let inputShape;\n  try {\n    inputShape = layer.inboundNodes.map(x => JSON.stringify(x.inputShapes)).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n  const connections = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 && relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(`${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields = [`${name} (${className})`, inputShape, outputShape, layer.countParams().toString(), firstConnection];\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', '', connections[i]], positions, printFn);\n  }\n}","map":{"version":3,"names":["countParamsInWeights","printSummary","model","lineLength","positions","printFn","arguments","length","undefined","console","log","sequentialLike","isModelSequentialLike","toDisplay","map","p","Math","floor","relevantNodes","push","depth","nodesByDepth","repeat","printRow","layers","i","printLayerSummary","printLayerSummaryWithConnections","checkTrainableWeightsConsistency","trainableCount","countTrainableParams","nonTrainableCount","nonTrainableWeights","collectedTrainableWeights","trainableWeights","nodes","depthNodes","inboundLayers","layer","flag","node","inboundNodes","indexOf","fields","line","slice","outputShape","inputShape","x","JSON","stringify","inputShapes","join","err","name","className","getClassName","countParams","toString","connections","inboundLayer","inboundLayerIndex","nodeIndices","inboundTensorIndex","tensorIndices","firstConnection"],"sources":["/Users/minjeongyeom/Projects/project-wildet/tfjs-layers/src/utils/layer_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {Container} from '../engine/container';\nimport {Layer, Node} from '../engine/topology';\nimport {countParamsInWeights} from './variable_utils';\n\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(\n    model: Container, lineLength?: number, positions?: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void =\n        console.log): void {\n  const sequentialLike = isModelSequentialLike(model);\n\n  // Header names for different log elements.\n  const toDisplay: string[] = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 90;\n    positions = positions || [0.32, 0.61, 0.89, 1];\n  } else {\n    lineLength = lineLength || 115;\n    positions = positions || [0.24, 0.48, 0.70, 0.80, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n\n  let relevantNodes: Node[];\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n\n  const layers = model.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(\n          layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n\n  // tslint:disable-next-line:no-any\n  (model as any).checkTrainableWeightsConsistency();\n\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\n\nfunction countTrainableParams(model: Container): number {\n  let trainableCount: number;\n  // tslint:disable:no-any\n  if ((model as any).collectedTrainableWeights != null) {\n    trainableCount =\n        countParamsInWeights((model as any).collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\n\nfunction isModelSequentialLike(model: Container): boolean {\n  let sequentialLike = true;\n  const nodesByDepth: Node[][] = [];\n  const nodes: Node[] = [];\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 ||\n        depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\n\nfunction printRow(\n    fields: string[], positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void = console.log) {\n  let line = '';\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(\n    layer: Layer, positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields: string[] =\n      [`${name} (${className})`, inputShape,\n      outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(\n    layer: Layer, positions: number[], relevantNodes: Node[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const connections: string[] = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 &&\n        relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(\n          `${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields: string[] = [\n    `${name} (${className})`, inputShape,\n    outputShape, layer.countParams().toString(),\n    firstConnection\n  ];\n\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', '', connections[i]], positions, printFn);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}